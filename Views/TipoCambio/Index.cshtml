@model urbanx.Models.TipoCambioViewModel
@{
    ViewBag.Title = "Tipo Cambio";
    var symbols = ViewData["symbols"] as Dictionary<string, string>;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tipo de Cambio</title>

    <link rel="stylesheet" href="~/css/tipocambio.css" asp-append-version="true" />
</head>

<body>
    <div class="exchange-container">
        <div class="container">
            <div class="exchange-card animate-fade-in">
                <h1 class="exchange-title text-center">Tipo de Cambio</h1>

                <div id="alertContainer"></div> <!-- Contenedor para la alerta -->

                <form asp-controller="TipoCambio" asp-action="Exchange" method="post" id="exchangeForm">
                    <div>
                        <label asp-for="From" class="form-label">Moneda de origen</label>
                        <select asp-for="From" class="form-select" name="From">
                            @foreach (var symbol in symbols)
                            {
                                <option value="@symbol.Key">@symbol.Value</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="To" class="form-label">Moneda destino</label>
                        <select asp-for="To" class="form-select" name="To">
                            @foreach (var symbol in symbols)
                            {
                                <option value="@symbol.Key">@symbol.Value</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Amount" class="form-label">Monto a convertir</label>
                        <input asp-for="Amount" class="form-control" placeholder="Ingrese el monto" name="Amount" />
                    </div>

                    <button type="submit" class="btn btn-exchange">
                        <i class="fas fa-exchange-alt me-2"></i>Convertir
                    </button>
                </form>

                @if (ViewData["rate"] != null || ViewData["result"] != null)
                {
                    <div class="results-container">
                        <div class="mb-2">
                            <div class="result-label">Tipo de Cambio:</div>
                            <div class="result-tipo-cambio">@ViewData["rate"]</div>
                        </div>
                        <div>
                            <div class="result-label">Monto convertido:</div>
                            <div class="result-monto-convertido">@ViewData["result"]</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('exchangeForm');
            const fromSelect = form.querySelector('select[name="From"]');
            const toSelect = form.querySelector('select[name="To"]');
            const amountInput = form.querySelector('input[name="Amount"]');
            const alertContainer = document.getElementById('alertContainer');

            form.addEventListener('submit', function (e) {
                const errors = [];

                if (fromSelect.value === toSelect.value) {
                    errors.push('Las monedas de origen y destino no pueden ser iguales.');
                }

                const amount = parseFloat(amountInput.value);
                if (isNaN(amount) || amount <= 0) {
                    errors.push('Por favor ingrese un monto válido mayor a 0.');
                }

                if (errors.length > 0) {
                    e.preventDefault();
                    showAlert(errors.join('<br>'));
                }
            });

            function showAlert(message) {
                const alertHTML = `
                    <div class="alert alert-warning alert-dismissible fade show" role="alert">
                        <strong>¡Advertencia!</strong> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
                alertContainer.innerHTML = alertHTML;
            }

            // Animación al cambiar de moneda
            [fromSelect, toSelect].forEach(select => {
                select.addEventListener('change', function () {
                    this.classList.add('animate-fade-in');
                    setTimeout(() => this.classList.remove('animate-fade-in'), 300);
                });
            });
        });
    </script>
</body>

</html>
